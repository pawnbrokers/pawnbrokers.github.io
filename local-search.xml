<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>二分查找</title>
    <link href="/2024/01/15/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
    <url>/2024/01/15/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</url>
    
    <content type="html"><![CDATA[<h1 id="三类题型"><a href="#三类题型" class="headerlink" title="三类题型"></a>三类题型</h1><ul><li>在有序数组中确定target是否存在</li><li>在有序数组中找&gt;&#x3D;target的最左位置</li><li>在有序数组中找&lt;&#x3D;target的最右位置</li></ul><h1 id="是否存在"><a href="#是否存在" class="headerlink" title="是否存在"></a>是否存在</h1><p>对于是否存在，只需要判断中间值是否等于target即可。而终止条件为left&gt;right。因为在相等的时候，也可能是符合条件的值。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestBinarySearch</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br>N := <span class="hljs-number">100</span><br>V := <span class="hljs-number">1000</span><br>testTime := <span class="hljs-number">500000</span><br>fmt.Println(<span class="hljs-string">&quot;测试开始&quot;</span>)<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; testTime; i++ &#123;<br>n := rand.Intn(N)<br>nums := randomArray(n, V)<br>sort.Ints(nums)<br>target := rand.Intn(V)<br>a1 := normalRight(nums, target)<br>a2 := binarySearch(nums, target)<br><span class="hljs-keyword">if</span> a1 != a2 &#123;<br>fmt.Printf(<span class="hljs-string">&quot;出错了!, a1=%v, a2=%v, nums=%v, target=%d\n&quot;</span>, a1, a2, nums, target)<br>&#125;<br>&#125;<br>fmt.Println(<span class="hljs-string">&quot;测试结束&quot;</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">randomArray</span><span class="hljs-params">(n, v <span class="hljs-type">int</span>)</span></span> []<span class="hljs-type">int</span> &#123;<br>arr := <span class="hljs-built_in">make</span>([]<span class="hljs-type">int</span>, n)<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; n; i++ &#123;<br>arr[i] = rand.Intn(v) + <span class="hljs-number">1</span><br>&#125;<br><span class="hljs-keyword">return</span> arr<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">normalRight</span><span class="hljs-params">(nums []<span class="hljs-type">int</span>, target <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">bool</span> &#123;<br><span class="hljs-keyword">for</span> _, cur := <span class="hljs-keyword">range</span> nums &#123;<br><span class="hljs-keyword">if</span> cur == target &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br><br><span class="hljs-comment">// binarySearch 二分查找</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">binarySearch</span><span class="hljs-params">(nums []<span class="hljs-type">int</span>, target <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">bool</span> &#123;<br>left := <span class="hljs-number">0</span><br>right := <span class="hljs-built_in">len</span>(nums) - <span class="hljs-number">1</span><br><br><span class="hljs-keyword">for</span> left &lt;= right &#123;<br>mid := (left + right) / <span class="hljs-number">2</span><br><span class="hljs-keyword">if</span> nums[mid] == target &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> nums[mid] &lt; target &#123;<br>left = mid + <span class="hljs-number">1</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>right = mid - <span class="hljs-number">1</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="在有序数组中找-target的最左位置"><a href="#在有序数组中找-target的最左位置" class="headerlink" title="在有序数组中找&gt;&#x3D;target的最左位置"></a>在有序数组中找&gt;&#x3D;target的最左位置</h1><p>寻找&gt;&#x3D;target的最左位置，步骤如下：</p><ul><li>如果<code>nums[mid]&gt;=target</code><ul><li>这是一个可能的值，需要暂时记下来</li><li>同时继续往左边看看还有没有其他的可能值</li></ul></li><li>否则<ul><li>直接向右看即可</li></ul></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// TestFindLeft 有序数组寻找&gt;=target的最左位置</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestFindLeft</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br>N := <span class="hljs-number">100</span><br>V := <span class="hljs-number">1000</span><br>testTime := <span class="hljs-number">500000</span><br>fmt.Println(<span class="hljs-string">&quot;测试开始&quot;</span>)<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; testTime; i++ &#123;<br>n := rand.Intn(N)<br>arr := randomArray(n, V)<br>sort.Ints(arr)<br>num := rand.Intn(V)<br>a1 := normalFindLeft(arr, num)<br>a2 := findLeft(arr, num)<br><span class="hljs-keyword">if</span> a1 != a2 &#123;<br>fmt.Printf(<span class="hljs-string">&quot;出错了!, a1=%v, a2=%v, arr=%v, num=%d\n&quot;</span>, a1, a2, arr, num)<br>&#125;<br>&#125;<br>fmt.Println(<span class="hljs-string">&quot;测试结束&quot;</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">normalFindLeft</span><span class="hljs-params">(nums []<span class="hljs-type">int</span>, target <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">for</span> idx, cur := <span class="hljs-keyword">range</span> nums &#123;<br><span class="hljs-keyword">if</span> cur &gt;= target &#123;<br><span class="hljs-keyword">return</span> idx<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span><br>&#125;<br><br><span class="hljs-comment">// findLeft 寻找有序数组第一个大于等于target的值</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">findLeft</span><span class="hljs-params">(nums []<span class="hljs-type">int</span>, target <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br>left := <span class="hljs-number">0</span><br>right := <span class="hljs-built_in">len</span>(nums) - <span class="hljs-number">1</span><br><span class="hljs-keyword">var</span> res = <span class="hljs-number">-1</span><br><span class="hljs-keyword">for</span> left &lt;= right &#123;<br>mid := (left + right) / <span class="hljs-number">2</span><br><span class="hljs-keyword">if</span> nums[mid] &gt;= target &#123;<br>res = mid       <span class="hljs-comment">// 这是一个可能的值</span><br>right = mid - <span class="hljs-number">1</span> <span class="hljs-comment">// 但是还要向左看下</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>left = mid + <span class="hljs-number">1</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> res<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="在有序数组中找"><a href="#在有序数组中找" class="headerlink" title="在有序数组中找&lt;&#x3D;target的最右位置"></a>在有序数组中找&lt;&#x3D;target的最右位置</h1><p>寻找&lt;&#x3D;target的最左位置，步骤如下：</p><ul><li>如果<code>nums[mid]&lt;=target</code><ul><li>这是一个可能的值，需要暂时记下来</li><li>同时继续往右边看看还有没有其他的可能值</li></ul></li><li>否则<ul><li>直接向左看即可</li></ul></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 有序数组寻找&lt;=num的最右位置</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestFindRight</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br>N := <span class="hljs-number">100</span><br>V := <span class="hljs-number">1000</span><br>testTime := <span class="hljs-number">500000</span><br>fmt.Println(<span class="hljs-string">&quot;测试开始&quot;</span>)<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; testTime; i++ &#123;<br>n := rand.Intn(N)<br>arr := randomArray(n, V)<br>sort.Ints(arr)<br>num := rand.Intn(V)<br>a1 := normalFindRight(arr, num)<br>a2 := findRight(arr, num)<br><span class="hljs-keyword">if</span> a1 != a2 &#123;<br>fmt.Printf(<span class="hljs-string">&quot;出错了!, a1=%v, a2=%v, arr=%v, num=%d\n&quot;</span>, a1, a2, arr, num)<br>&#125;<br>&#125;<br>fmt.Println(<span class="hljs-string">&quot;测试结束&quot;</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">normalFindRight</span><span class="hljs-params">(nums []<span class="hljs-type">int</span>, target <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">var</span> res = <span class="hljs-number">-1</span><br><span class="hljs-keyword">for</span> idx, cur := <span class="hljs-keyword">range</span> nums &#123;<br><span class="hljs-keyword">if</span> cur &gt; target &#123;<br><span class="hljs-keyword">break</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>res = idx<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> res<br>&#125;<br><br><span class="hljs-comment">// findLeft 寻找有序数组最后一个小于等于target的值</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">findRight</span><span class="hljs-params">(nums []<span class="hljs-type">int</span>, target <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br>left := <span class="hljs-number">0</span><br>right := <span class="hljs-built_in">len</span>(nums) - <span class="hljs-number">1</span><br><span class="hljs-keyword">var</span> res = <span class="hljs-number">-1</span><br><span class="hljs-keyword">for</span> left &lt;= right &#123;<br>mid := (left + right) / <span class="hljs-number">2</span><br><span class="hljs-keyword">if</span> nums[mid] &lt;= target &#123;<br>res = mid      <span class="hljs-comment">// 这是一个可能的值</span><br>left = mid + <span class="hljs-number">1</span> <span class="hljs-comment">//但是还是要继续向右看</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>right = mid - <span class="hljs-number">1</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> res<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>二分查找</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
